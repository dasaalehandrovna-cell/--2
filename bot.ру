# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6 + Telegram Cloud Backup
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import requests
import telebot
from flask import Flask, request
from telebot import types

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.6"
KEEP_ALIVE_INTERVAL_SECONDS = int(os.getenv("KEEP_ALIVE_INTERVAL_SECONDS", 13*60))
KEEP_ALIVE_SEND_TO_OWNER = True

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
def send_temp_message(chat_id, text, delay=5, **kwargs):
    try:
        msg = bot.send_message(chat_id, text, **kwargs)
        threading.Timer(delay, lambda: delete_message_safe(chat_id, msg.message_id)).start()
        return msg
    except Exception as e:
        log_error(f"send_temp_message: {e}")

def delete_message_safe(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except:
        pass

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg): logging.info(msg)
def log_error(msg): logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ + Telegram Cloud Backup
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Telegram Cloud –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json: {e}")
            d = default_data()
    else:
        d = default_data()

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Telegram Cloud, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    if not d.get("records"):
        try:
            cloud_msg_id_file = "cloud_backup_msg_id.txt"
            if os.path.exists(cloud_msg_id_file) and OWNER_ID:
                with open(cloud_msg_id_file, "r") as f:
                    msg_id = int(f.read().strip())
                f_msg = bot.forward_message(chat_id=int(OWNER_ID), from_chat_id=int(OWNER_ID), message_id=msg_id)
                cloud_data = f_msg.json if hasattr(f_msg, "json") else None
                if cloud_data:
                    d = json.loads(cloud_data)
                    log_info("–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Telegram Cloud")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Cloud: {e}")

    # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ Telegram Cloud –≤–ª–∞–¥–µ–ª—å—Ü—É."""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
        # --- Cloud Backup ---
        try:
            if OWNER_ID:
                tmp_file = "cloud_backup.json"
                with open(tmp_file, "w", encoding="utf-8") as f:
                    json.dump(d, f, ensure_ascii=False, indent=2)
                sent = bot.send_document(int(OWNER_ID), open(tmp_file, "rb"), caption="–ê–≤—Ç–æ –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö")
                with open("cloud_backup_msg_id.txt", "w") as f:
                    f.write(str(sent.message_id))
                os.remove(tmp_file)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ Cloud Backup: {e}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# -----------------------------
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ OWNER_ID
# -----------------------------
if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass
# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –ß–∞—Å—Ç—å 2/4
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –∏ –∑–∞–ø–∏—Å—è–º–∏
# ============================================

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç-—Å—Ç–æ—Ä–æ–º
# -----------------------------
def get_chat_store(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    if str(chat_id) not in data["chats"]:
        data["chats"][str(chat_id)] = {
            "balance": 0,
            "records": []
        }
    return data["chats"][str(chat_id)]

def add_record(chat_id, amount, note="", record_type="expense"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ + Cloud Backup"""
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    record = {
        "id": rid,
        "amount": amount,
        "note": note,
        "type": record_type,
        "date": datetime.now(TZ).isoformat()
    }
    store["records"].append(record)
    data["next_id"] = rid + 1

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if record_type == "expense":
        store["balance"] -= amount
        data["overall_balance"] -= amount
    else:
        store["balance"] += amount
        data["overall_balance"] += amount

    save_data(data)
    return record

def edit_record(chat_id, record_id, amount=None, note=None, record_type=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ + Cloud Backup"""
    store = get_chat_store(chat_id)
    for rec in store["records"]:
        if rec["id"] == record_id:
            # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
            if amount is not None:
                delta = amount - rec["amount"]
                if rec["type"] == "expense":
                    store["balance"] -= delta
                    data["overall_balance"] -= delta
                else:
                    store["balance"] += delta
                    data["overall_balance"] += delta
                rec["amount"] = amount
            if note is not None:
                rec["note"] = note
            if record_type is not None and record_type != rec["type"]:
                # –ü–µ—Ä–µ—Å—á—ë—Ç –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
                if rec["type"] == "expense" and record_type == "income":
                    store["balance"] += rec["amount"] * 2
                    data["overall_balance"] += rec["amount"] * 2
                elif rec["type"] == "income" and record_type == "expense":
                    store["balance"] -= rec["amount"] * 2
                    data["overall_balance"] -= rec["amount"] * 2
                rec["type"] = record_type
            save_data(data)
            return rec
    return None

def reset_records(chat_id):
    """–û–±–Ω—É–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —á–∞—Ç–∞"""
    store = get_chat_store(chat_id)
    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    for rec in store["records"]:
        if rec["type"] == "expense":
            data["overall_balance"] += rec["amount"]
        else:
            data["overall_balance"] -= rec["amount"]
    store["records"] = []
    store["balance"] = 0
    save_data(data)

# -----------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –º–µ–Ω—é
# -----------------------------
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí∞ –ë–∞–ª–∞–Ω—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üóÇ –û—Ç—á—ë—Ç")
    return kb

def edit_keyboard(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data=f"reset:{chat_id}"))
    kb.add(types.InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=f"csv:{chat_id}"))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    return kb

# -----------------------------
# –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    chat_id = msg.chat.id
    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç! –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç v{VERSION}", reply_markup=main_keyboard())
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    store = get_chat_store(chat_id)
    bot.send_message(chat_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {store['balance']:.2f}")

@bot.message_handler(func=lambda m: m.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
def show_balance(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    bot.send_message(chat_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {store['balance']:.2f}")

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_new_record(msg):
    chat_id = msg.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: 500, –æ–±–µ–¥")
    bot.register_next_step_handler(msg, process_new_record)

def process_new_record(msg):
    chat_id = msg.chat.id
    try:
        text = msg.text
        parts = [p.strip() for p in text.split(",")]
        amount = float(parts[0])
        note = parts[1] if len(parts) > 1 else ""
        rec = add_record(chat_id, amount, note, "expense")
        bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {rec['amount']} ‚Äî {rec['note']}")
    except Exception as e:
        send_temp_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data_call = call.data
    chat_id = call.message.chat.id

    if data_call.startswith("reset:"):
        reset_records(chat_id)
        bot.edit_message_text("–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω—É–ª–µ–Ω—ã.", chat_id, call.message.message_id)
    elif data_call.startswith("csv:"):
        export_csv(chat_id, call.message.message_id)
    elif data_call == "back":
        bot.edit_message_text("–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", chat_id, call.message.message_id, reply_markup=edit_keyboard(chat_id))
# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –ß–∞—Å—Ç—å 3/4
# –≠–∫—Å–ø–æ—Ä—Ç, —Ñ–æ—Ä–≤–∞—Ä–¥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ keep-alive
# ============================================

import csv
import io
import threading
import time

OWNER_ID = 123456789  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞

# -----------------------------
# –≠–∫—Å–ø–æ—Ä—Ç CSV
# -----------------------------
def export_csv(chat_id, message_id=None):
    store = get_chat_store(chat_id)
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–¢–∏–ø", "–û–ø–∏—Å–∞–Ω–∏–µ"])
    for rec in store["records"]:
        writer.writerow([rec["id"], rec["date"], rec["amount"], rec["type"], rec["note"]])
    output.seek(0)

    bot.send_document(chat_id, ("report.csv", output.getvalue()))
    if message_id:
        bot.edit_message_text("CSV —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.", chat_id, message_id)

# -----------------------------
# –§–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü—É
# -----------------------------
def forward_to_owner(msg):
    try:
        bot.forward_message(OWNER_ID, msg.chat.id, msg.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# -----------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö
# -----------------------------
def notify_owner_new_record(chat_id, record):
    text = f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —á–∞—Ç–µ {chat_id}: {record['amount']} ‚Äî {record['note']}"
    try:
        bot.send_message(OWNER_ID, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")

# -----------------------------
# Keep-Alive (–ø–∏–Ω–≥ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ X —Å–µ–∫—É–Ω–¥)
# -----------------------------
def keep_alive(interval=600):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–∂–¥—ã–µ interval —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    def ping():
        while True:
            try:
                bot.send_message(OWNER_ID, "üíì Keep-Alive: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ Keep-Alive: {e}")
            time.sleep(interval)
    t = threading.Thread(target=ping, daemon=True)
    t.start()

# -----------------------------
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–µ–π
# -----------------------------
def add_record_notify(chat_id, amount, note="", record_type="expense"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ + –±—ç–∫–∞–ø"""
    rec = add_record(chat_id, amount, note, record_type)
    notify_owner_new_record(chat_id, rec)
    return rec
# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –ß–∞—Å—Ç—å 4/4
# –ê–≤—Ç–æ-–±—ç–∫–∞–ø –≤ Telegram, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫
# ============================================

import json

BACKUP_CHAT_ID = OWNER_ID  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OWNER_ID –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–∞
BACKUP_FILE_NAME = "backup_data.json"

# -----------------------------
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
# -----------------------------
def backup_to_telegram():
    try:
        json_data = json.dumps(data, ensure_ascii=False, indent=2)
        bot.send_document(BACKUP_CHAT_ID, (BACKUP_FILE_NAME, json_data.encode("utf-8")))
        print("‚úÖ –ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –≤ Telegram: {e}")

# -----------------------------
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
# -----------------------------
def restore_from_telegram():
    """–ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—ç–∫–∞–ø–æ–º –≤ —á–∞—Ç–µ OWNER_ID"""
    try:
        messages = bot.get_chat_history(BACKUP_CHAT_ID, limit=20)
        for msg in reversed(messages):
            if msg.document and msg.document.file_name == BACKUP_FILE_NAME:
                file_info = bot.get_file(msg.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                d = json.loads(downloaded_file.decode("utf-8"))
                global data
                data = d
                save_data(data)
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Telegram")
                return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram: {e}")
    return False

# -----------------------------
# –ê–≤—Ç–æ-–±—ç–∫–∞–ø –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
# -----------------------------
def auto_backup_on_change():
    """–°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ X —Å–µ–∫—É–Ω–¥"""
    INTERVAL = 300  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    last_snapshot = json.dumps(data, ensure_ascii=False)
    def task():
        nonlocal last_snapshot
        while True:
            try:
                current_snapshot = json.dumps(data, ensure_ascii=False)
                if current_snapshot != last_snapshot:
                    backup_to_telegram()
                    last_snapshot = current_snapshot
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞: {e}")
            time.sleep(INTERVAL)
    t = threading.Thread(target=task, daemon=True)
    t.start()

# -----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–¥–ª—è Render, Railway, –∏ —Ç.–¥.)
# -----------------------------
def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook, –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å HTTPS"""
    webhook_url = os.getenv("RENDER_EXTERNAL_URL")
    if webhook_url:
        full_url = f"{webhook_url}/{TOKEN}"
        try:
            bot.remove_webhook()
            bot.set_webhook(url=full_url)
            log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        log_info("Webhook –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç polling")

# –í—ã–∑—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
set_webhook()

# -----------------------------
# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
# -----------------------------
if __name__ == "__main__":
    print("‚è≥ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    restored = restore_from_telegram()
    if not restored:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –∏–∑ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    
    # –ó–∞–ø—É—Å–∫ keep-alive –∏ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞
    keep_alive(interval=KEEP_ALIVE_INTERVAL_SECONDS)
    auto_backup_on_change()
    
    # Webhook –∏ Flask
    set_webhook()
    schedule_daily_window_creation()
    
    print(f"üöÄ –ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.send_message(OWNER_ID, f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! (–≤–µ—Ä—Å–∏—è {VERSION})")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ —Å—Ç–∞—Ä—Ç–µ: {e}")
    
    # Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host="0.0.0.0", port=PORT)